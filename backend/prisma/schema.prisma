// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String?
  dataRooms DataRoom[]
  folders   Folder[]
  files     File[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("users")
}

model DataRoom {
  id        String   @id @default(uuid())
  name      String
  description String?
  user_id   String   @map("user_id")
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  folders   Folder[]
  files     File[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("data_rooms")
}

model Folder {
  id             String   @id @default(uuid())
  name           String
  parent         Folder?  @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  parentId       String?  @map("parent_folder_id")
  children       Folder[] @relation("FolderChildren")
  files          File[]
  dataRoom       DataRoom @relation(fields: [dataRoomId], references: [id], onDelete: Cascade)
  dataRoomId     String   @map("data_room_id")
  user_id        String   @map("user_id")
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("folders")
}

model File {
  id        String   @id @default(uuid())
  name      String
  fileType  String   @map("mime_type")
  size      Int?     @map("file_size")
  filePath  String?  @map("file_path")
  folder    Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)
  folderId  String?  @map("folder_id")
  dataRoom  DataRoom @relation(fields: [dataRoomId], references: [id], onDelete: Cascade)
  dataRoomId String  @map("data_room_id")
  user_id   String   @map("user_id")
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("files")
}
